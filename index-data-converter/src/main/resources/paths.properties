# Json Path to map from Solr to EHRI graph format

id=id
itemId=id
type=type
name=data.name
typeOfEntity=data.typeOfEntity
depthOfDescription=data.depthOfDescription
levelOfDescription=data.levelOfDescription
scope=data.scope
publicationStatus=data.publicationStatus
lastUpdated=relationships.lifecycleEvent[0].data.timestamp
accessPoints=relationships.relatesTo[*].data.name
creator=relationships.relatesTo[?(@.data.type=='creator')].data.name
people=relationships.relatesTo[?(@.data.type=='person')].data.name
subjects=relationships.relatesTo[?(@.data.type=='subject')].data.name
places=relationships.relatesTo[?(@.data.type=='place')].data.name
corporateBodies=relationships.relatesTo[?(@.data.type=='corporateBody')].data.name
accessibleTo=relationships.access[*].id
parallelFormsOfName=data.parallelFormsOfName[*],\
  data.parallelFormsOfName
otherFormsOfName=data.otherFormsOfName[*],\
  data.otherFormsOfName
identifier=data.identifier
otherIdentifiers=data.otherIdentifiers
languageCode=data.languageCode
repositoryId=relationships.heldBy[0].id
repositoryName=relationships.heldBy[0].relationships.describes[0].data.name
parentId=relationships.childOf[0].id,\
  relationships.broader[*].id,\
  relationships.isPartOf[*].id
ancestorIds=..relationships.childOf[*].id
## new added for multilingual indexing
addresses=relationships.hasAddress[0].data.*
archivalHistory=data.archivalHistory
biographicalHistory=data.biographicalHistory
scopeAndContent=data.scopeAndContent
abstract=data.abstract
dateStart=relationships.hasDate[0].data.startDate
dateEnd=relationships.hasDate[0].data.endDate
longitude=data.longitude
latitude=data.latitude
languageOfMaterial=relationships.describes[*].data.languageOfMaterial[*]
creationProcess=data.creationProcess
# Country code for location - applies to reposities and docs
countryCode=\
  relationships.hasCountry[0].id,\
  relationships.heldBy[0].relationships.hasCountry[0].id
holderId=relationships.heldBy[0].id,relationships.inAuthoritativeSet[0].id
priority=data.priority
# Demonstrates use of fallback path matching. The first matched path will win.
holderName=\
  relationships.heldBy[0].relationships.describes[0].data.name,\
  relationships.inAuthoritativeSet[0].data.name,\
  relationships.inAuthoritativeSet[0].data.identifier
# Graph ID is a hack to speed up fetching DB entries from search results
# It won't always exist, but we should use it where possible...
gid=meta.gid
# Childcount is an optimisation field to indicate how many items
# are 'below' this item in a hierarchy - it often won't be present
childCount=meta.childCount

# Store if items are promoted/promotable
isPromotable=data.isPromotable
promotionScore=meta.promotionScore

# User profile / group active notice.
active=data.active

# Groups (for users and other groups)
groupId=relationships.belongsTo[*].id
groupName=relationships.belongsTo[*].data.name

# Target items for annotations and links. These may
# or may not have multiple descriptions
targetIds=\
  relationships.hasLinkTarget[*].id,\
  relationships.annotates[*].id
targetTypes=\
  relationships.hasLinkTarget[*].type,\
  relationships.annotates[*].type
targets=\
  relationships.hasLinkTarget[*].relationships.describes[*].data.name,\
  relationships.hasLinkTarget[*].data.name,\
  relationships.annotates[*].relationships.describes[*].data.name,\
  relationships.annotates[*].data.name

# Link external body (typically an access point)
linkBodyName=relationships.hasLinkBody[*].data.name

annotatorId=relationships.hasAnnotation[0].id
annotatorName=relationships.hasAnnotation[0].data.name


